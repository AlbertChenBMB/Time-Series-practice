tra.dataset$revol_util[is.na(tra.dataset$revol_util)]<-mean(tra.dataset$revol_util,na.rm = TRUE)
tra.dataset$inq_last_6mths[is.na(tra.dataset$inq_last_6mths)]<-0
na.omit(tra.dataset)
##check
summary(tra.dataset)
#information
mean(tra.dataset$payback_rate)
mean(tra.dataset$gain)
quantile(tra.dataset$payback_rate)
quantile(tra.dataset$gain)
str(tra.dataset)
dataset<-select(tra.dataset,c(1,2,3,4,6,7,8,9,10,
11,12,13,14,15,16,
17,18,19,20,21,22,
23,24,25,26,27,28,29,30,31,32,
38,40,35,41))
set.seed(456605)
split = sample.split(dataset, SplitRatio = 0.7)
training_set = subset(dataset, split == TRUE)
testset = subset(dataset, split == FALSE)
L_train<-training_set[-c(33,34)]
C_train<-training_set[-c(33,35)]
library(caret)
system.time(l_classifier <-glm(formula = payback_rate ~.,
family = binomial,
data = L_train))
############
#randomForest
library(randomForest)
?randomForest
system.time(rf_l<-randomForest(payback_rate~.,
data = L_train,
ntree=200,
importance=T,
do.trace= 10
))
#training_set$label<-as.factor(m_L_train$payback_rate)
#names problems
names(testset)[12]<-"verification_status_Source_Verified"
names(L_train)[12]<-"verification_status_Source_Verified"
names(L_train)[11]<-"verification_status_Not_Verified"
names(testset)[11]<-"verification_status_Not_Verified"
system.time(rf_l<-randomForest(payback_rate~.,
data = L_train,
ntree=200,
importance=T,
do.trace= 10
))
library(rpart)
#anova for regression tree
system.time(cart  <- rpart(payback_rate~. ,
method = "anova",
data=L_train))
PD<-select(dataset2016,c(1, 3,4 ,5, 6,7, 10, 11, 12, 13,14 ,19 ,23 ,24, 25, 26 ,29,30 ,31 ,32, 33,38,15))
head(PD)
#filter loan status to remine Full pay, default, charge off
PD<-filter(PD,loan_status =="Fully Paid"|loan_status =="Charged Off"|loan_status =="Default")
########
##time problem rember change in csv about credit age1``
PD$issue_d<-dmy(paste("01-", PD$issue_d , sep =""))
PD$earliest_cr_line<-dmy(paste("01-", PD$earliest_cr_line , sep =""))
#creat new variable call credit age
PD<-mutate(PD,
credit_age = difftime(PD$issue_d,PD$earliest_cr_line,units="weeks"))
##time problem rember change in csv about term
# PD$term = factor(PD$term,
#                       levels = c(" 36 months"," 60 months"),
#                       labels = c(0.6, 1))
# #
# PD$term<-as.numeric(levels(PD$term))[PD$term]
#creat new variable call return_rate and new label
#change to %numerice
PD$int_rate<-as.numeric(sub("%","",PD$int_rate))/100
PD<-mutate(PD,return_rate =(1+PD$int_rate)^(2*PD$term))
#plot different grade
library(ggplot2)
#loan_status VS grade
ggplot(PD , aes(x = grade , y = ..count.. , fill = factor(loan_outcome , c(1 , 0) , c('Default' , 'Fully Paid')))) +
geom_bar() +
theme(legend.title = element_blank())
# PD<-mutate(PD,return_rate =(1+PD$int_rate)^(2*PD$term))
# PD<-mutate(PD,
#               loss_rate = log(PD$total_pymnt_inv/(PD$funded_amnt_inv*PD$return_rate)))
# #replace the loss_rate is small then -1
# inf<-PD$loss_rate<=-1
# PD[inf,25]<- -1
##########################################################
PD = PD %>%
mutate(loan_outcome = ifelse(loan_status %in% c('Charged Off' , 'Default') ,
1,
ifelse(loan_status == 'Fully Paid' , 0 , 'No info')
))
#loan_status VS grade
ggplot(PD , aes(x = grade , y = ..count.. , fill = factor(loan_outcome , c(1 , 0) , c('Default' , 'Fully Paid')))) +
geom_bar() +
theme(legend.title = element_blank())
#plot boxplot
#DTI vs loan_statue
ggplot( PD,aes(x=loan_status,y=dti,fill=grade))+geom_boxplot()
#plot boxplot
#DTI vs loan_statue
ggplot( PD,aes(x=loan_status,y=dti))+geom_boxplot()
#plot boxplot
#DTI vs loan_statue #problem is there are some dti very high
ggplot( PD,aes(x=loan_status,y=dti,fill=loan_status))+geom_boxplot()
#plot boxplot
#DTI vs loan_statue #problem is there are some dti very high
ggplot( PD,aes(x=grade,y=dti,fill=loan_status))+geom_boxplot()
# ITP
ggplot( PD,aes(x=grade,y=ITP,fill=loan_status))+geom_boxplot()
# ITP
ggplot( PD,aes(x=loan_status,y=dti,fill=home_ownership))+geom_boxplot()
# PD<-mutate(PD,return_rate =(1+PD$int_rate)^(2*PD$term))
# PD<-mutate(PD,
#               loss_rate = log(PD$total_pymnt_inv/(PD$funded_amnt_inv*PD$return_rate)))
# #replace the loss_rate is small then -1
# inf<-PD$loss_rate<=-1
# PD[inf,25]<- -1
PD<-mutate(PD,mic = PD$annual_inc/12,ITP = (PD$installment/mic))
z<-PD$ITP>=1
PD[z,"ITP"]<- 1
#round DTI
z<-PD$dti>=100
PD[z,"DTI"]<-100
summary(PD)
PD<-na.omit(PD)
#round DTI
z<-PD$dti>=100
PD[z,"DTI"]<-100
#plot boxplot
#DTI vs loan_statue #problem is there are some dti very high
ggplot( PD,aes(x=grade,y=dti,fill=loan_status))+geom_boxplot()
summary(PD$dti)
#round DTI
z<-PD$dti>=100
z
summaary
summary(PD$dti)
class(PD$dti)
#round DTI
z<- PD$dti >=100
class(PD$dti)
z
tail(z)
PD$dti >= 100
PD$dti >= 1
PD$dti >= 10
PD$dti
summary(PD$dti)
#round DTI
z<- PD$dti >= 100
PD[z,"DTI"]<-100
summary(PD$dti)
#plot boxplot
#DTI vs loan_statue #problem is there are some dti very high
ggplot( PD,aes(x=grade,y=dti,fill=loan_status,ylim=c(1:100)))+geom_boxplot()
#plot boxplot
#DTI vs loan_statue #problem is there are some dti very high
ggplot( PD,aes(x=grade,y=dti,fill=loan_status))+geom_boxplot()+coord_cartesian(ylim = c(0:100))
#plot boxplot
#DTI vs loan_statue #problem is there are some dti very high
ggplot( PD,aes(x=loan_status,y=dti,fill=loan_status))+geom_boxplot()+coord_cartesian(ylim = c(0:100))
# ITP
ggplot( PD,aes(x=grade,y=ITP,fill=loan_status))+geom_boxplot()
# ITP
ggplot( PD,aes(x=loan_status,y=ITP,fill=loan_status))+geom_boxplot()
#with home ownership
ggplot( PD,aes(x=loan_status,y=dti,fill=home_ownership))+geom_boxplot()
#with home ownership
ggplot( PD,aes(x=loan_status,y=dti,fill=home_ownership))+geom_boxplot()+coord_cartesian(ylim = c(0:100))
ggplot( PD,aes(x=loan_status,y=ITP,fill=home_ownership))+geom_boxplot()
#loan_status VS loss_rate
ggplot( PD,aes(x=loan_status,y=loss_rate,fill=loan_status))+geom_point(aes(color=grade,alpha=0.3))
#loan_status VS grade
ggplot(PD , aes(x = grade , y = ..count.. , fill = factor(loan_outcome , c(1 , 0) , c('Default' , 'Fully Paid')))) +
geom_bar() +
theme(legend.title = element_blank())
#loan_status VS grade
ggplot(PD , aes(x = home_ownership , y = ..count.. , fill = factor(loan_outcome , c(1 , 0) , c('Default' , 'Fully Paid')))) +
geom_bar() +
theme(legend.title = element_blank())
#loan_status VS purpose
ggplot(PD , aes(x = purpose , y = ..count.. , fill = factor(loan_outcome , c(1 , 0) , c('Default' , 'Fully Paid')))) +
geom_bar() +
theme(legend.title = element_blank())
system.time(s_l <- svm(formula = payback_rate ~.,
data = L_train,
type = 'eps-regression',
kernel = 'radial'))
summary(PD$home_ownership)
filter(PD,home_ownership=="OWN")
filter(PD,home_ownership=="ANY")
PD$DTI<-NNULL
PD$DTI<-null
PD$DTI<-NULL
mortga<-filter(PD,home_owner=="MORTGAGE")
mortga<-filter(PD,home_ownership=="MORTGAGE")
own<-filter(PD,home_ownership=="OWN")
rent<-filter(PD,home_ownership=="RENT")
summary(mortga$loan_status)
summary(mortga$oputcome)
summary(mortga$loan_outcome)
filter(PD,loan_outcome=="Default")
filter(PD,loan_outcome==1)
filter(PD,loan_outcome==0)
length(filter(PD,loan_outcome==0))
nrow(filter(PD,loan_outcome==0))
nrow(filter(PD,loan_outcome==1))
nrow(filter(mortga,loan_outcome==1))
nrow(filter(mortga,loan_outcome==0))
nrow(filter(own,loan_outcome==0))
nrow(filter(own,loan_outcome==1))
nrow(filter(rent,loan_outcome==1))
nrow(filter(rent,loan_outcome==0))
summary(PD$purpose)
tbl_df(PD)
str(PD)
any<-filter(PD,home_ownership=="ANY")
nrow(filter(any,loan_outcome==0))
####
ggplot( PD,aes(x=int_rate ,y=dti,fill=loan_status))+
geom_point(aes(shape=term,color=term,alpha=0.2),size=2)+
xlab("Interest Rate")+ylab("dti")
####
ggplot( PD,aes(x=int_rate ,y=dti,fill=loan_status))+
geom_point(aes(shape=loan_status,color=loan_status,alpha=0.2),size=2)+
xlab("Interest Rate")+ylab("dti")
##################################################################################################################################
#Relationship wiht  IR DTI ITP and loan_status
ggplot( PD,aes(x=int_rate ,y=dti,fill=loan_outcome))+
geom_point(aes(shape=loan_outcome,color=loan_outcome,alpha=0.2),size=2)+
xlab("Interest Rate")+ylab("dti")+coord_cartesian(ylim = c(0:100))
ggplot( PD,aes(x=int_rate ,y=ITP,fill=loan_outcome))+
geom_point(aes(shape=loan_outcome,color=loan_outcome,alpha=0.2),size=2)+
xlab("Interest Rate")+ylab("ITP")
# ITP
ggplot( PD,aes(x=loan_status,y=ITP,fill=loan_status))+geom_boxplot()
# ITP
ggplot( PD,aes(x=loan_outcome,y=ITP,fill=loan_status))+geom_boxplot()
# ITP
ggplot( PD,aes(x=loan_outcome,y=ITP,fill=loan_outcome))+geom_boxplot()
# ITP
ggplot( PD,aes(x=ITP,y=loan_outcome,fill=loan_outcome))+geom_boxplot()
?geom_boxplot
?png
##################################################################################################################################
#Relationship wiht  IR DTI ITP and loan_status
#plot
png(filename = "IDrelationship.png",width = 480,height = 480)
#plot different grade
par(mfrow=c(2,1))
ggplot( PD,aes(x=int_rate ,y=dti,fill=loan_outcome))+
geom_point(aes(shape=loan_outcome,color=loan_outcome,alpha=0.2),size=2)+
xlab("Interest Rate")+ylab("dti")+coord_cartesian(ylim = c(0:100))
ggplot( PD,aes(x=int_rate ,y=ITP,fill=loan_outcome))+
geom_point(aes(shape=loan_outcome,color=loan_outcome,alpha=0.2),size=2)+
xlab("Interest Rate")+ylab("ITP")
dev.off
dev.off()
##################################################################################################################################
#Relationship wiht  IR DTI ITP and loan_status
#plot
png(filename = "IDrelationship.png",width = 480,height = 480)
#plot
par(mfrow=c(1,1))
P1<-ggplot( PD,aes(x=int_rate ,y=dti,fill=loan_outcome))+
geom_point(aes(shape=loan_outcome,color=loan_outcome,alpha=0.2),size=2)+
xlab("Interest Rate")+ylab("dti")+coord_cartesian(ylim = c(0:100))
P2<-ggplot( PD,aes(x=int_rate ,y=ITP,fill=loan_outcome))+
geom_point(aes(shape=loan_outcome,color=loan_outcome,alpha=0.2),size=2)+
xlab("Interest Rate")+ylab("ITP")
multiplot(p1, p2, cols=1)
library(grid)
multiplot(p1, p2, cols=1)
install.packages("grid")
#plot
png(filename = "IDrelationship.png",width = 480,height = 480)
P1<-ggplot( PD,aes(x=int_rate ,y=dti,fill=loan_outcome))+
geom_point(aes(shape=loan_outcome,color=loan_outcome,alpha=0.2),size=2)+
xlab("Interest Rate")+ylab("dti")+coord_cartesian(ylim = c(0:100))
dev.off()
png(filename = "IIrelationship.png",width = 480,height = 480)
ggplot( PD,aes(x=int_rate ,y=ITP,fill=loan_outcome))+
geom_point(aes(shape=loan_outcome,color=loan_outcome,alpha=0.2),size=2)+
xlab("Interest Rate")+ylab("ITP")
dev.off()
#plot
png(filename = "IDrelationship.png",width = 480,height = 480)
ggplot( PD,aes(x=int_rate ,y=dti,fill=loan_outcome))+
geom_point(aes(shape=loan_outcome,color=loan_outcome,alpha=0.2),size=2)+
xlab("Interest Rate")+ylab("dti")+coord_cartesian(ylim = c(0:100))
png(filename = "DIrelationship.png",width = 480,height = 480)
ggplot( PD,aes(x=ITP ,y=dti,fill=loan_outcome))+
geom_point(aes(shape=loan_outcome,color=loan_outcome,alpha=0.2),size=2)+
xlab("ITP")+ylab("DTI")+coord_cartesian(ylim = c(0:100))
dev.off()
dev.off()
#plot
png(filename = "IDrelationship.png",width = 480,height = 480)
ggplot( PD,aes(x=int_rate ,y=dti,fill=loan_outcome))+
geom_point(aes(shape=loan_outcome,color=loan_outcome,alpha=0.2),size=2)+
xlab("Interest Rate")+ylab("dti")+coord_cartesian(ylim = c(0:100))
dev.off()
dev.off()
dev.off()
#plot
png(filename = "IDrelationship.png",width = 480,height = 480)
ggplot( PD,aes(x=int_rate ,y=dti,fill=loan_outcome))+
geom_point(aes(shape=loan_outcome,color=loan_outcome,alpha=0.2),size=2)+
xlab("Interest Rate")+ylab("dti")+coord_cartesian(ylim = c(0:100))
dev.off()
png(filename = "DIrelationship.png",width = 480,height = 480)
ggplot( PD,aes(x=ITP ,y=dti,fill=loan_outcome))+
geom_point(aes(shape=loan_outcome,color=loan_outcome,alpha=0.2),size=2)+
xlab("ITP")+ylab("DTI")+coord_cartesian(xlim = c(0:0.5),ylim = c(0:50))
dev.off()
####################################################################################################################################
png(filename = "Hrelationship.png",width = 480,height = 480)
#loan_status VS home_ownership                                                                                                   ###
ggplot(PD , aes(x = home_ownership , y = ..count.. , fill = factor(loan_outcome , c(1 , 0) , c('Default' , 'Fully Paid')))) +    ###
geom_bar() +                                                                                                                   ###
theme(legend.title = element_blank())                                                                                          ###
# for mortga, default=19871, fullpay=72880, 21.4%                                                                                ###
# for own, default=5925, fullpay=16831, 26%
# for RENT, default=22607, fullpay=49025, 31.6%
# any<-filter(PD,home_ownership=="ANY")
# for any, default=8, fullpay=24, 26%
dev.off()
#loan_status VS purpose
ggplot(PD , aes(x = purpose , y = ..count.. , fill = factor(loan_outcome , c(1 , 0) , c('Default' , 'Fully Paid')))) +
geom_bar() +
theme(legend.title = element_blank())
####################################################################################################################################
png(filename = "Hrelationship.png",width = 590,height = 430)
#loan_status VS purpose
ggplot(PD , aes(x = purpose , y = ..count.. , fill = factor(loan_outcome , c(1 , 0) , c('Default' , 'Fully Paid')))) +
geom_bar() +
theme(legend.title = element_blank())
dev.off()
setwd("~/GitHub/Time-Series-practice/Chaos_data")
#for HEN
Dataset<-read.table("HENON.DAT.txt")
newHdata<-data.frame(0)
for(i in 1:(nrow(Dataset)/28)){
newHdata[i,1]<-Dataset[(1+i*28),]
}
newHdata
#look for GNN for H
Hrs<-list()
for (i in 1:9){
d<-Dist(data = newHdata,n=i+1)
Hrs[i]<-abs(newHdata[d[1]+i+1,]-newHdata[d[2]+i+1,])^2/d[,3]
print(Hrs[i])
}
#PLOT   from 2 to 10
png("GNN for HENON.png", width=480, height=480)
plot(Hrs,x = 1:9,type = "l")
dev.off()
##################################################################
# Mutual Information function
# MI & average MI
#PA is probality of A, PB is probality of B, PAB is the cross probality of A and B
MI<-function(PA,PB,PAB){
ans<-matrix(0,nrow = 100,ncol = 100)#creat a matrix
for (i in c(1:100)) {
for(j in c(1:100)){
if (PAB[i,j] !=0){
ans[i,j] <- PAB[i,j]*log2((PAB[i,j]/PA[i])/PB[j])
}
}
}
return(sum((ans)))
}
##################################################################
#PA PB function
prob<-function(new,newB){
PA<-0
PB<-0
for (i in c(0:100)) {
PA[i+1]<- (length(subset(new, i/100 < new & new <= ((i+1)/100) )) / length(new))# get the probality of A in every range (0.01~1)
PB[i+1]<- (length(subset(newB, i/100 < newB & newB <= ((i+1)/100) )) / length(newB)) # get the probality of B in every range(0.01~1)
}
PA<-PA[1:100]
PB<-PB[1:100]
AB<-cbind(new,newB) #cbind new and newB to calculate PAB
PAB<-matrix(0, nrow = 101, ncol = 101)
for(i in c(0:100)){
for(j in c(0:100)){
PAB[i+1,j+1]<-length(subset(AB, i/100 < new & new <= ((i+1)/100) & j/100 < newB & newB <= ((j+1)/100) )) / length(AB)
}
}
MI(PA,PB,PAB)
}
#function
DimData<-function(data,n){
GNN<-matrix(ncol = n,nrow = (nrow(data)))
GNN[,1]<-data[,1]
for( i in c(1:(nrow(data)))){
for(j in c(1:n)){
GNN[i,j]<-data[(i+j-1),1]
}
}
return(GNN)
}
##second calculate dist
Dist<-function(data,n){
mind<-matrix(nrow = 1,ncol = 3,100)
GN<-DimData(data = data,n = n)
for (i in 1:(length(GN[,1])-(n+2))){
GNN<-GN[1:(nrow(GN)-n),]
for (j in 1:n){
GNN[(i+1):(length(GNN[,1])),j]<-GNN[(i+1):(length(GNN[,1])),j]-GNN[i,j]
}
dist<-0
for(k in 1:n){
dist<-dist+na.omit(GNN[,k])^2 #problem dist+ give empty back
}
if (mind[,3] > min(dist)){
mind[,1]<-i
mind[,2]<-which.min(dist)
mind[,3]<-min(dist)
}
}
return(mind)
}
Hrs<-list()
for (i in 1:9){
d<-Dist(data = newHdata,n=i+1)
Hrs[i]<-abs(newHdata[d[1]+i+1,]-newHdata[d[2]+i+1,])^2/d[,3]
print(Hrs[i])
}
Hdata<-as.data.frame(Hdata)
#spread data
library(caTools)
#####
Hdata<-matrix(nrow =( nrow(newHdata)-6),ncol = 6)
for(i in 1:6){
Hdata[,i]<-newHdata[( i:(nrow(newHdata)-(7-i))),]
}
Hdata<-as.data.frame(Hdata)
#spread data
library(caTools)
H_training_set<-Hdata[1:463,   ]
H_testset<-Hdata[463:579,   ]
#SVM
library(e1071)
library(MLmetrics)
Error<-matrix(nrow = 20,ncol = 20)
for(i in 1:20){
for(j in 1:20){
H_s_regression <- svm(formula = V6 ~.,
data = H_training_set,
type = 'eps-regression',
kernel = 'radial',
cost=(i/10),
gamma=(j/10))
# Predicting the Test set results
s_pred = predict(H_s_regression, newdata = H_testset[-6])
Error[i,j]<-RMSE(s_pred,H_testset[6])
print( Error[i,j])
}
}
?svm
plot(Best)
#############
ansplot<-H_testset[6]
plot(x=c(463:579),y=ansplot$V6,type = "l")
which.min(Error)
Error
Error[381]
Error[20,1]
Error[1,20]
#############
H_s_regression <- svm(formula = V6 ~.,
data = H_training_set,
type = 'eps-regression',
kernel = 'radial',
cost=(0.1),
gamma=(2))
s_pred = predict(H_s_regression, newdata = H_testset[-6])
plot(x=c(463:579),y=ansplot$V6,type = "l")
line(s_pred)
adline(s_pred)
addline(s_pred)
abline(s_pred,col="red")
abline(s_pred,color="red")
?abline
abline(s_pred,col="red")
plot(x=c(463:579),y=ansplot$V6,type = "l")
abline(a=s_pred,col="red")
abline(s_pred,col="red")
abline(s_pred)
dim(s_pred)
s_pred = predict(H_s_regression, newdata = H_testset[-6])
s_pred
s_pred[c(463:579),]
s_pred[c(463:579)]
s_pred[,c(463:579)]
s_pred[]
plot(x=c(463:579),y=ansplot$V6,type = "l")
abline(s_pred[])
abline(y=s_pred[])
?abline
plot(x=c(463:579),y=s_pred,type = "l",col="red")
plot(Dataset)
plot(y=Dataset$V1)
plot(x=c(1:1638y=Dataset$V1)
plot(x=c(1:16384),y=Dataset$V1)
plot(x=c(1:16384),y=Dataset$V1,type = "l")
plot(x=c(1:500),y=Dataset$V1,type = "l")
plot(x=c(1:500),y=Dataset$V1[1:500],type = "l")
Error[381]
