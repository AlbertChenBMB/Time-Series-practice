Dataset[(1)]
Dataset[,(1)]
Dataset[(1),]
# data after MI
for(i in 1:(length(Dataset)/15)){
newdata<-0
newdata[i]<-Dataset[(1+i*15),]
}
newdata
# data after MI
newdata<-0
for(i in 1:(length(Dataset)/15)){
newdata[i]<-Dataset[(1+i*15),]
}
newdata
# data after MI
newdata<-list(0)
for(i in 1:(length(Dataset)/15)){
newdata[i]<-Dataset[(1+i*15),]
}
newdata
(length(Dataset)/15)
length(Dataset)
nrow(Dataset)
for(i in 1:(nrow(Dataset)/15)){
newdata[i]<-Dataset[(1+i*15),]
}
newdata
#for ROS
Dataset<-read.table("ROSSLER.DAT.txt")
newdata<-list(0)
for(i in 1:(nrow(Dataset)/15)){
newRdata[i]<-Dataset[(1+i*15),]
}
newRdata<-list(0)
for(i in 1:(nrow(Dataset)/15)){
newRdata[i]<-Dataset[(1+i*15),]
}
newRdata
#for HEN
Dataset<-read.table("HENON.DAT.txt")
newHdata<-list(0)
for(i in 1:(nrow(Dataset)/28)){
newHdata[i]<-Dataset[(1+i*28),]
}
newHdata
# data after MI
#for ROS
Dataset<-read.table("ROSSLER.DAT.txt")
#########################################################
#for GNN
#look for GNN
Rrs<-list()
for (i in 1:9){
d<-Dist(data = Dataset,n=i+1)
rs[i]<-abs(Dataset[d[1]+i+1,]-Dataset[d[2]+i+1,])^2/d[,3]
print(rs[i])
}
#for HEN
Dataset<-read.table("HENON.DAT.txt")
#PLOT   from 2 to 10
plot(Rrs,x = 1:9,type = "l")
for (i in 1:9){
d<-Dist(data = Dataset,n=i+1)
Rrs[i]<-abs(Dataset[d[1]+i+1,]-Dataset[d[2]+i+1,])^2/d[,3]
print(Rrs[i])
}
Rrs<-list()
for (i in 1:9){
d<-Dist(data = newRdata,n=i+1)
Rrs[i]<-abs(newRdata[d[1]+i+1,]-newRdata[d[2]+i+1,])^2/d[,3]
print(Rrs[i])
}
class(newRdata)
newRdata<-as.data.frame(newRdata)
?as.data.frame
# data after MI
#for ROS
Dataset<-read.table("ROSSLER.DAT.txt")
newRdata<-list(0)
for(i in 1:(nrow(Dataset)/15)){
newRdata[i]<-Dataset[(1+i*15),]
}
newRdata<-as.data.frame(newRdata,optional = TRUE)
newRdata<-list(0)
for(i in 1:(nrow(Dataset)/15)){
newRdata[i]<-Dataset[(1+i*15),]
}
newRdata<-as.data.frame(newRdata,optional = FALSE)
?as.matrix
newRdata<-list(0)
for(i in 1:(nrow(Dataset)/15)){
newRdata[i]<-Dataset[(1+i*15),]
}
newRdata<-as.matrix(newRdata,,nrows = 1)
Rrs<-list()
for (i in 1:9){
d<-Dist(data = newRdata,n=i+1)
Rrs[i]<-abs(newRdata[d[1]+i+1,]-newRdata[d[2]+i+1,])^2/d[,3]
print(Rrs[i])
}
?as.matrix
newRdata<-as.martix(nrow=1,ncol=546,newRdata,)
newRdata<-as.matrix(nrow=1,ncol=546,newRdata,)
newRdata<-as.matrix(nrow=1,ncol=546,newRdata)
class(newRdata)
newRdata[1]
newRdata[2]
Rrs<-list()
for (i in 1:9){
d<-Dist(data = newRdata,n=i+1)
Rrs[i]<-abs(newRdata[d[1]+i+1,]-newRdata[d[2]+i+1,])^2/d[,3]
print(Rrs[i])
}
Dist(data = newRdata,n=2)
newRdata<-data.frame(0)
for(i in 1:(nrow(Dataset)/15)){
newRdata[i]<-Dataset[(1+i*15),]
}
for(i in 1:(nrow(Dataset)/15)){
newRdata[[i]]<-Dataset[(1+i*15),]
}
newRdata
for(i in 1:(nrow(Dataset)/15)){
newRdata[,i]<-Dataset[(1+i*15),]
}
for(i in 1:(nrow(Dataset)/15)){
newRdata[i,]<-Dataset[(1+i*15),]
}
newRdata
for(i in 1:(nrow(Dataset)/15)){
newRdata[[i,]]<-Dataset[(1+i*15),]
}
for(i in 1:(nrow(Dataset)/15)){
newRdata[i,1]<-Dataset[(1+i*15),]
}
newRdata<-data.frame(0)
newRdata
for(i in 1:(nrow(Dataset)/15)){
newRdata[i,1]<-Dataset[(1+i*15),]
}
newRdata
#for HEN
Dataset<-read.table("HENON.DAT.txt")
newRdata<-data.frame(0)
for(i in 1:(nrow(Dataset)/28)){
newHdata[i,1]<-Dataset[(1+i*28),]
}
newRdata<-data.frame(0)
for(i in 1:(nrow(Dataset)/15)){
newRdata[i,1]<-Dataset[(1+i*15),]
}
# data after MI
#for ROS
Dataset<-read.table("ROSSLER.DAT.txt")
newRdata<-data.frame(0)
for(i in 1:(nrow(Dataset)/15)){
newRdata[i,1]<-Dataset[(1+i*15),]
}
newRdata
#for HEN
Dataset<-read.table("HENON.DAT.txt")
newHdata<-data.frame(0)
for(i in 1:(nrow(Dataset)/28)){
newHdata[i,1]<-Dataset[(1+i*28),]
}
Rrs<-list()
for (i in 1:9){
d<-Dist(data = newRdata,n=i+1)
Rrs[i]<-abs(newRdata[d[1]+i+1,]-newRdata[d[2]+i+1,])^2/d[,3]
print(Rrs[i])
}
#PLOT   from 2 to 10
png("GNN for ROSSLER.png", width=480, height=480)
plot(Rrs,x = 1:9,type = "l")
dev.off()
Hrs<-list()
for (i in 1:9){
d<-Dist(data = newHdata,n=i+1)
Hrs[i]<-abs(newHdata[d[1]+i+1,]-newHdata[d[2]+i+1,])^2/d[,3]
print(Hrs[i])
}
nrow(newRdata)
#####
Rdata<-matrix(nrow =( nrow(newRdata)-3),ncol = 3)
dim(Rdata)
newRdata[( nrow(newRdata)-3)]
newRdata[,( nrow(newRdata)-3)]
newRdata[(nrow(newRdata)-3),]
newRdata[1:(nrow(newRdata)-3),]
#####
Rdata<-matrix(nrow =( nrow(newRdata)-3),ncol = 3)
for(i in 1:3){
Rdata[,i]<-newRdata[( 1:nrow(newRdata)-(4-i)),]
}
for(i in 1:3){
Rdata[,i]<-newRdata[( i:nrow(newRdata)-(4-i)),]
}
newRdata[( 1:nrow(newRdata)-(4-1)),]
newRdata[( i:(nrow(newRdata)-(4-i))),]
for(i in 1:3){
Rdata[,i]<-newRdata[((i:nrow(newRdata)-(4-i))),]
}
#####
Rdata<-matrix(nrow =( nrow(newRdata)-3),ncol = 3)
for(i in 1:3){
Rdata[,i]<-newRdata[((i:nrow(newRdata)-(4-i))),]
}
newRdata[( i:(nrow(newRdata)-(4-i))),]
newRdata[((1:nrow(newRdata)-(4-1))),]
newRdata[( i:(nrow(newRdata)-(4-i))),]
newRdata[( 1:(nrow(newRdata)-(3))),]
newRdata[( 1:(nrow(newRdata)-(4-1))),]
dim(Rdata)
Rdata[,1]<-newRdata[( 1:(nrow(newRdata)-(4-1))),]
Rdata[,2]<-newRdata[( 2:(nrow(newRdata)-(4-2))),]
Rdata[,3]<-newRdata[( 3:(nrow(newRdata)-(4-3))),]
View(Rdata)
#####
Hdata<-matrix(nrow =( nrow(newHdata)-5),ncol = 5)
for(i in 1:6){
Hdata[,i]<-newHdata[( i:(nrow(newRdata)-(6-i))),]
}
#####
Rdata<-matrix(nrow =( nrow(newRdata)-4),ncol = 4)
for(i in 1:4){
Rdata[,i]<-newRdata[( i:(nrow(newRdata)-(5-i))),]
}
#####
Hdata<-matrix(nrow =( nrow(newHdata)-6),ncol = 6)
for(i in 1:6){
Hdata[,i]<-newHdata[( i:(nrow(newRdata)-(7-i))),]
}
for(i in 1:6){
Hdata[,i]<-newHdata[( i:(nrow(newHdata)-(7-i))),]
}
names(Rdata)
head(Rdata)
names(Rdata)<-c(v1,v2,v3,ans)
names(Rdata)<-c("v1","v2","v3","ans")
names(Hdata)<-c("v1","v2","v3","ans")
#spread data
library(caTools)
set.seed(456605)
split = sample.split(Rdata, SplitRatio = 0.85)
R_training_set = subset(dataset, split == TRUE)
R_training_set = subset(Rdata, split == TRUE)
R_testset = subset(Rdata, split == FALSE)
split = sample.split(Rdata, SplitRatio = 0.85)
R_training_set = subset(Rdata, split == TRUE)
split = sample.split(Rdata, SplitRatio = 0.85)
training_set = subset(Rdata, split == TRUE)
nrow(Rdata)
ncol(Rdata)
split = sample.split(Rdata, SplitRatio = 0.85)
training_set = subset(Rdata, split == TRUE)
nrow(Rdata)*0.85
nrow(Rdata)*0.8
R_training_set<-Rdata[1:461,   ]
?svm
#SVM
library(e1071)
?svm
R_testset<-Rdata[461:542,   ]
R_s_regression <- svm(formula = ans ~.,
data = R_training_set,
type = 'eps-regression',
kernel = 'radial')
names(R_training_set)
names(Rdata)
Rdata<-as.data.frame(Rdata)
names(Rdata)
R_training_set<-Rdata[1:461,   ]
R_testset<-Rdata[461:542,   ]
#SVM
library(e1071)
R_s_regression <- svm(formula = V4 ~.,
data = R_training_set,
type = 'eps-regression',
kernel = 'radial')
# Predicting the Test set results
s_pred = predict(R_s_classifier, newdata = R_testset[-4])
# Predicting the Test set results
s_pred = predict(R_s_regression, newdata = R_testset[-4])
RMSE(s_pred,testset[4])
library(MLmetrics)
RMSE(s_pred,testset[4])
RMSE(s_pred,R_testset[4])
Error<-matrix(nrow = 20,ncol = 20)
for(i in 0:20){
for(j in 0:2){
R_s_regression <- svm(formula = V4 ~.,
data = R_training_set,
type = 'eps-regression',
kernel = 'radial',
cost=(i/10),
gamma=(j/10))
# Predicting the Test set results
s_pred = predict(R_s_regression, newdata = R_testset[-4])
Error[i,j]<-RMSE(s_pred,R_testset[4])
print( Error[i,j])
}
}
for(i in 1:20){
for(j in 1:20){
R_s_regression <- svm(formula = V4 ~.,
data = R_training_set,
type = 'eps-regression',
kernel = 'radial',
cost=(i/10),
gamma=(j/10))
# Predicting the Test set results
s_pred = predict(R_s_regression, newdata = R_testset[-4])
Error[i,j]<-RMSE(s_pred,R_testset[4])
print( Error[i,j])
}
}
Error
View(Error)
which.min(Error)
Error[380]
#data plot
Dataset<-read.table("HENON.DAT.txt")
plot(x=c(1:16384),data(Dataset))
plot(x=c(1:16384),y=Dataset$V1)
plot(x=c(1:16384),y=Dataset$V1,type = "l")
plot(y=Dataset$V1,type = "l")
plotdata<-matrix(nrow = 16383,ncol = 2)
Dataset[-1]
Dataset[-1,]
View(Dataset)
plotdata[,2]<-Dataset[1:16383]
plotdata[,2]<-Dataset[1:16383,]
plotdata[,1]<-Dataset[1:16383,]
plotdata[,2]<-Dataset[2:16384,]
plot(x=plotdata[,1],y=plotdata[,2],type = "l")
plot(x=plotdata[,1],y=plotdata[,2])
plot(x=plotdata[,2],y=plotdata[,1])
plot(x=plotdata[,2],y=plotdata[,1],size=1)
plot(x=plotdata[,2],y=plotdata[,1],main = "HENON",xlab = "T+1",ylab = "T")
png("HENON.png", width=480, height=480)
plot(x=plotdata[,2],y=plotdata[,1],main = "HENON",xlab = "T+1",ylab = "T")
dev.off()
plotdata[,1]<-Dataset[1:(nrow(Dataset)-1),]
plotdata[,2]<-Dataset[2:nrow(Dataset),]
plot(x=plotdata[,2],y=plotdata[,1],main = "HENON",xlab = "T+1",ylab = "T")
##################################################################
#read data
Dataset<-read.table("HENON.DAT.txt")
# for new and newB, calculate MI from 1~100
Ans<-0
for(i in c(1:100)) {
new<-normalize(x=Dataset$V1,method ="range",range = c(0,1))
newB<-new[(i+1):length(new)]
new<-new[1:(length(new)-i)]
Ans[i]<-prob(new,newB)
print(Ans[i])
}
###################################################################
plot(Ans[1:30],type = "l",xlab = "T",ylab = "Av.MI")
which.min(Ans[1:30])
###################################################################
plot(Ans[1:50],type = "l",xlab = "T",ylab = "Av.MI",main = "Average MI")
###################################################################
png("MI for HENON.png", width=480, height=480)
plot(Ans[1:50],type = "l",xlab = "T",ylab = "Av.MI",main = "Average MI")
which.min(Ans[1:30])
dev.off()
Ans[28]
#Global Nearest Neighbor
#first build a matrix
Dataset<-read.table("HENON.DAT.txt")
#look for GNN
rs<-list()
for (i in 1:9){
d<-Dist(data = Dataset,n=i+1)
rs[i]<-abs(Dataset[d[1]+i+1,]-Dataset[d[2]+i+1,])^2/d[,3]
print(rs[i])
}
#for HEN
Dataset<-read.table("HENON.DAT.txt")
newHdata<-data.frame(0)
for(i in 1:(nrow(Dataset)/28)){
newHdata[i,1]<-Dataset[(1+i*28),]
}
newHdata
Hrs<-list()
for (i in 1:9){
d<-Dist(data = newHdata,n=i+1)
Hrs[i]<-abs(newHdata[d[1]+i+1,]-newHdata[d[2]+i+1,])^2/d[,3]
print(Hrs[i])
}
#PLOT   from 2 to 10
png("GNN for HENON.png", width=480, height=480)
plot(Hrs,x = 1:9,type = "l")
dev.off()
plot(Hrs,x = 1:5,type = "l")
plot(Hrs,x = 1:9,type = "l")
plot(Hrs,x = 1:5,type = "l")
plot(Hrs,x = Hrs[1:5],type = "l")
Hrs[1:5]
plot(x=1:5,y = Hrs[1:5],type = "l")
plot(x=2:5,y = Hrs[2:5],type = "l")
plot(x=3:5,y = Hrs[3:5],type = "l")
head(Error)
G_one<-Error[10,]
G_one<-Error[,10]
plot(G_one)
plot(G_one,type = "l")
plot(G_one,type = "l",xlab = "Gamma/10",ylab = "Error")
plot(G_one,type = "l",xlab = "Cost/10",ylab = "Error",main = "Gamma = 1")
C_one<-Error[1,]
plot(G_one,type = "l",xlab = "Gamma/10",ylab = "Error",main = "Cost = 0.1")
plot(C_one,type = "l",xlab = "Gamma/10",ylab = "Error",main = "Cost = 0.1")
plot(Error)
Error
#############
Best<-Error[,19]
plot(Best)
plot(R_testset[4])
plot(y=R_testset[4])
plot(x=c(1:82),y=R_testset[4])
ansplot<-R_testset[4]
ansplot
plot(ansplot)
plot(ansplot,x=c(1:82),y=ansplot$V4)
plot(ansplot,x=1:nrow(ansplot),y=ansplot$V4)
View(ansplot)
plot(ansplot,x=461:542,y=ansplot$V4)
plot(ansplot,x=c(461:542),y=ansplot$V4)
plot(ansplot,x=c(461:543),y=ansplot$V4)
plot(ansplot,x=c(461:542),y=ansplot$V4)
plot(x=c(461:542),y=ansplot$V4)
plot(x=c(461:542),y=ansplot$V4,type = "l")
#####
Hdata<-matrix(nrow =( nrow(newHdata)-6),ncol = 6)
for(i in 1:6){
Hdata[,i]<-newHdata[( i:(nrow(newHdata)-(7-i))),]
}
names(Hdata)<-c("v1","v2","v3","ans")
Hdata<-as.data.frame(Hdata)
#spread data
library(caTools)
H_training_set<-Hdata[1:463,   ]
H_testset<-Hdata[463:579,   ]
Error<-matrix(nrow = 20,ncol = 20)
#SVM
library(e1071)
library(MLmetrics)
for(i in 1:20){
for(j in 1:20){
R_s_regression <- svm(formula = V4 ~.,
data = H_training_set,
type = 'eps-regression',
kernel = 'radial',
cost=(i/10),
gamma=(j/10))
# Predicting the Test set results
s_pred = predict(H_s_regression, newdata = H_testset[-4])
Error[i,j]<-RMSE(s_pred,H_testset[4])
print( Error[i,j])
}
}
for(i in 1:20){
for(j in 1:20){
H_s_regression <- svm(formula = V4 ~.,
data = H_training_set,
type = 'eps-regression',
kernel = 'radial',
cost=(i/10),
gamma=(j/10))
# Predicting the Test set results
s_pred = predict(H_s_regression, newdata = H_testset[-4])
Error[i,j]<-RMSE(s_pred,H_testset[4])
print( Error[i,j])
}
}
head(Error)
head(Hdata)
for(i in 1:20){
for(j in 1:20){
H_s_regression <- svm(formula = V6 ~.,
data = H_training_set,
type = 'eps-regression',
kernel = 'radial',
cost=(i/10),
gamma=(j/10))
# Predicting the Test set results
s_pred = predict(H_s_regression, newdata = H_testset[-6])
Error[i,j]<-RMSE(s_pred,H_testset[6])
print( Error[i,j])
}
}
which.min(Error)
#############
G_one<-Error[,10]
C_one<-Error[1,]
plot(G_one,type = "l",xlab = "Cost/10",ylab = "Error",main = "Gamma = 1")
plot(C_one,type = "l",xlab = "Gamma/10",ylab = "Error",main = "Cost = 0.1")
#############
ansplot<-H_test[6]
#############
ansplot<-H_testset[6]
plot(Best)
plot(x=c(463:579),y=ansplot$V4,type = "l")
plot(x=c(463:579),y=ansplot$V6,type = "l")
plot(x=c(463:579),y=s_pred,type = "l")
plot(x=c(463:579),y=s_pred,type = "l",color="red")
plot(x=c(463:579),y=s_pred,type = "l",col="red")
abline(ansplot$V6)
abline(ansplot$V6,lty=1)
plot(x=c(463:579),y=ansplot$V6,type = "l")
