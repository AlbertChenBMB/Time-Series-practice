library(swirl)
swirl()
str(mpg)
qplot(displ,hwy,data = mpg)
qplot(displ,hwy,data = mpg,aesthetic =drv)
qplot(displ,hwy,data = mpg,color =drv)
qplot(displ,hwy,data = mpg,color =drv,geom=c("point","smooth"))
qplot(y= hwy,data = mpg,color=drv)
myhigh
qplot(drv,hwy,data = mpg,geom="boxplot")
qplot(drv,hwy,data = mpg,geom="boxplot",color=manufactuer)
qplot(drv,hwy,data = mpg,geom="boxplot",color=manufacturer)
qplot(hwy,data = mpg,aesthetic=drv)
qplot(hwy,data = mpg,fill =drv)
qplot
qplot(displ, hwy, data = mpg, facets = . ~
| drv)
qplot(displ, hwy, data = mpg, facets = . ~drv)
qplot(hwy, data = mpg, facets = drv~., binwidth=2)
qplot(displ,hwy,data=mpg,geom = c("point","smooth"),facets =  .~drv)
play()
qplot(displ,hwy,data=mpg,geom = c("point","smooth"),facets = drv~.)
nxt()
ggplot(mpg,aes(displ,hwy))
g<-ggplot(mpg,aes(displ,hwy))
summary(g)
g+geom_point()
+geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(lm)
g+geom_point()+geom_smooth(method=lm)
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm")+facet_grid(. ~drv)
g+geom_point()+geom_smooth(method="lm")+facet_grid(. ~drv)+ggtitle("Swirl Rules!")
g+geom_point(color="pink",size=4,alpha=1/2)
g+geom_point(size=4,alpha=1/2,aes(color=drv))
g+geom_point(aes(color=drv))+labs(title="Swirl Rules!")+labs(x="Displacement",y="Hwy Mileage")
g+geom_point(size=2,alpha=1/2,aes(color=drv))+geom_smooth(size=4,method = "lm",se=FALSE)
g+geom_point(size=2,alpha=1/2,aes(color=drv))+geom_smooth(size=4,linetype=3,method = "lm",se=FALSE)
g+geom_point(aes(color=drv))+theme_bw(base_family = "Times")
plot(myx,myy,type = "l",ylim = c(-3,3))
g<-ggplot(testdat,aes(x=myx,y=myy))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+coord_cartesian(ylim = c(-3,3))
g<-ggplot(data = mpg,aes(x=displ,y=hwy,color=factor(year)))
g+geom_point()
g+geom_point()+facet_grid(formula=drv~cyl,margins = TRUE)
g+geom_point()+facet_grid(drv~cyl,margins = TRUE)
g+geom_point()+facet_grid(drv~cyl,margins = TRUE)+geom_smooth(method = "lm",se=FALSE,size=2,color="blaek")
g+geom_point()+facet_grid(drv~cyl,margins = TRUE)+geom_smooth(method = "lm",se=FALSE,size=2,color="black")
g+geom_point()+facet_grid(drv~cyl,margins = TRUE)+geom_smooth(method = "lm",se=FALSE,size=2,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
setwd("~/GitHub/ExData_Plotting1")
setwd("~/GitHub/Air-pollutation-data-exploratory")
NEI<-readRDS("summarySCC_PM25.rds")
SCC<-readRDS("Source_Classification_Code.rds")
View(SCC)
head(NEI,3)
dir()
library(dplyr)
# Have total emissions from PM2.5 decreased in
# the United States from 1999 to 2008?
# Using the base plotting system, make a plot
# showing the total PM2.5 emission from all sources
# for each of the years 1999, 2002, 2005, and 2008.
emission<-NEI[c(4,6),]
View(emission)
# Have total emissions from PM2.5 decreased in
# the United States from 1999 to 2008?
# Using the base plotting system, make a plot
# showing the total PM2.5 emission from all sources
# for each of the years 1999, 2002, 2005, and 2008.
emission<-NEI[,c(4,6)]
View(emission)
group_by(emission,year)
View(emission)
sapply(emission,sum)
sapply(group_by(emission,year),sum)
sapply(group_by(emission,year),summarise(sum(Emissions)))
summarise(sum(Emissions))
summarise(sum(emission$Emissions))
group_by(emission,year) %>%
summarise(sum(Emissions))
PM2.5_emission<-group_by(emission,year) %>%
summarise(sum(Emissions))
View(PM2.5_emission)
plot(PM2.5_emission$`sum(Emissions)`,y=year,type = "l")
plot(PM2.5_emission$`sum(Emissions)`,y=(PM2.5_emission$year,type = "l")
plot(PM2.5_emission$`sum(Emissions)`,y=(PM2.5_emission$year),type = "l")
plot(y=PM2.5_emission$`sum(Emissions)`,x=(PM2.5_emission$year),type = "l")
plot(y=PM2.5_emission$`sum(Emissions)`,
x=(PM2.5_emission$year),type = "l",
xlab = "Year",
ylab = "Emission",
main = "Emission of PM2.5 Change in every year")
plot(y=PM2.5_emission$`sum(Emissions)`,
x=(PM2.5_emission$year),type = "l",
xlab = "Year",
ylab = "Emission",
main = "Emission of PM2.5 change in every year")
#Q2.Have total emissions from PM2.5 decreased in the
#   Baltimore City, Maryland (fips == "24510") from 1999
#   to 2008? Use the base plotting system to make a plot
#   answering this question.
emission_Baltimor<-filter(NEI,fips=="24510")
PM2.5_emission_B<-group_by(emission_Baltimor,year) %>%
summarise(sum(Emissions))
plot(y=PM2.5_emission_B$`sum(Emissions)`,
x=(PM2.5_emission$year),type = "l",
xlab = "Year",
ylab = "Emission",
main = "Emission of PM2.5 change in every year")
View(emission)
png("plot1.png",width = 680,height = 480)
plot(y=PM2.5_emission$`sum(Emissions)`,
x=(PM2.5_emission$year),type = "l",
xlab = "Year",
ylab = "Emission",
main = "Emission of PM2.5 change in every year")
dev.off()
png("plot2.png",width = 680,height = 480)
plot(y=PM2.5_emission_B$`sum(Emissions)`,
x=(PM2.5_emission$year),type = "l",
xlab = "Year",
ylab = "Emission",
main = "Emission of PM2.5 change in every year")
dev.off()
View(NEI)
View(SCC)
setwd("~/GitHub/Time-Series-practice/US_Long-term_rates")
install.packages("keras")
install.packages("tensorflow")
library(keras)
library(tensorflow)
packageVersion(keras)
packageVersion("keras")
packageVersion("tensorflow")
dataset<-read.csv("MEI_FIN_12102018085446303.csv")
dataset<-read.csv("MEI_FIN_12102018085446303.csv",header = FALSE)
View(dataset)
dataset<-read.csv("MEI_FIN_12102018085446303.csv",header = TRUE)
dataset<-read.csv("MEI_FIN_12102018090343317.csv",header = TRUE)
dataset<-read.csv("MEI_FIN_12102018090343317.csv",header = TRUE,sep = ",")
dataset<-read.csv("MEI_FIN_12102018090343317.csv",header = FALSE,sep = ",")
head(dataset)
LR<-dataset[,7,15]
LR
head(LR)
LR<-dataset[,c(7,15)]
head(LR)
names(LR)<-c("Date","LTR")
head(LR)
class(LR$Date)
names(LR)<-c("Time","LTR")
LR$Time<-as.Date(LR$Time)
LR$Time<-as.Date(LR$Time,format=%Y-%M)
LR$Time<-as.Date(LR$Time,tryFormat="%Y-%M")
class(LR$Time)
head(LR)
LR<-dataset[,c(7,15)]
names(LR)<-c("Time","LTR")
plot(x = LR$Time,y=LR$LTR,mind="US Long-term Interest Rates")
plot(x = LR$Time,y=LR$LTR,mind="US Long-term Interest Rates",type="l")
tail(LR)
head(LR)
plot(x = LR$Time,y=LR$LTR,type="l")
library(ggplot2)
qplot(LR)
qplot(LR$Time,LR$LTR)
View(LR)
qplot(LR$Time,LR$LTR)+geom_smooth()
class(LR$LTR)
qplot(LR$Time,LR$LTR)+geom_smooth()+geom_line()
??dmy
library(lubridate)#for date type
LR$Time<-dmy(paste("01-", LR$Time , sep =""))
install.packages("lubridate")
library(lubridate)#for date type
LR$Time<-dmy(paste("01-", LR$Time , sep =""))
View(LR)
LR<-dataset[,c(7,15)]
names(LR)<-c("Time","LTR")
LR$Time<-dym(paste("01-", LR$Time , sep =""))
View(LR)
plot(x =LR$Time ,y=LR$LTR,type="l")
plot(data=LR,LTR,Time,type="l")
plot(data=LR,Time,type="l")
plot(x=LR$Time,y=LR$LTR,type="l")
plot(y=LR$Time,x=LR$LTR,type="l")
View(LR)
LR<-dataset[1:131,c(7,15)]
names(LR)<-c("Time","LTR")
#change to date type
LR$Time<-dym(paste("01-", LR$Time , sep =""))
plot(y=LR$Time,x=LR$LTR,type="l")
plot(x=LR$Time,y=LR$LTR,type="l",color="blue")
plot(x=LR$Time,y=LR$LTR,type="l",col="blue")
#transofrm data to stationarity
diffed<-diff(LR,differences = 1)
#transofrm data to stationarity
diffed<-diff(LR$LTR,differences = 1)
head(diffed)
lag_transform<-function(x,k=1){
lagged =c(rep(NA,k),x[1:(length(x)-k)])
DF=as.data.frame(cbind(lagged,x))
colnames(DF)<-c(paste0("x-",k),"x")
DF[is.na(DF)]<-0
return(DF)
}
supervised= lag_transform(diffed,1)
head(supervised)
#split into train and test sets
N=nrow(supervised)
n=round(N*0.7,digits=0)
train=supervised[1:n,]
test=supervised[(n+1):N,]
View(test)
scale_data=function(train,test,feature_rang=c(0,1)){
x=train
fr_min=feature_range[1]
fr_max=feature_rang[2]
std_train = ((x-min(x))/(max(x)-min(x) ))
std_tes = ((test-min(x))/(max(x)-min(x)))
scaled_train=std_train*(fr_max-fr_min)+fr_min
scaled_test=std_test*(fr_max-fr_min)+fr_min
return(list(scaled_train=as.vector(scaled_train),
scaled_test=as.vector(scaled_test),
scaler=c(min=min(x),max=max(x))))
}
Scaled=scale_data(train,test,c(-1,1))
Scaled=scale_data(train,test,feature_rang = c(-1,1))
# scale data
scale_data=function(train,test,feature_rang = c(0,1)){
x= train
fr_min=feature_range[1]
fr_max=feature_rang[2]
std_train = ((x-min(x))/(max(x)-min(x) ))
std_tes = ((test-min(x))/(max(x)-min(x)))
scaled_train=std_train*(fr_max-fr_min)+fr_min
scaled_test=std_test*(fr_max-fr_min)+fr_min
return(list(scaled_train=as.vector(scaled_train),
scaled_test=as.vector(scaled_test),
scaler=c(min=min(x),max=max(x))))
}
Scaled=scale_data(train,test,feature_rang = c(-1,1))
# scale data
scale_data=function(train,test,fr = c(0,1)){
x= train
fr_min=fr[1]
fr_max=fr[2]
std_train = ((x-min(x))/(max(x)-min(x) ))
std_tes = ((test-min(x))/(max(x)-min(x)))
scaled_train=std_train*(fr_max-fr_min)+fr_min
scaled_test=std_test*(fr_max-fr_min)+fr_min
return(list(scaled_train=as.vector(scaled_train),
scaled_test=as.vector(scaled_test),
scaler=c(min=min(x),max=max(x))))
}
Scaled=scale_data(train,test,fr = c(-1,1))
# scale data
scale_data=function(train,test,fr = c(0,1)){
x= train
fr_min=fr[1]
fr_max=fr[2]
std_train = ((x-min(x))/(max(x)-min(x) ))
std_test = ((test-min(x))/(max(x)-min(x)))
scaled_train=std_train*(fr_max-fr_min)+fr_min
scaled_test=std_test*(fr_max-fr_min)+fr_min
return(list(scaled_train=as.vector(scaled_train),
scaled_test=as.vector(scaled_test),
scaler=c(min=min(x),max=max(x))))
}
Scaled=scale_data(train,test,fr = c(-1,1))
Scaled
y_train<-Scaled$scaled_train[,2]
y_test<-Scaled$scaled_test[,2]
x_test<-Scaled$scaled_test[,1]
invert_scaling = function(scaled, scaler, feature_range = c(0, 1)){
min = scaler[1]
max = scaler[2]
t = length(scaled)
mins = feature_range[1]
maxs = feature_range[2]
inverted_dfs = numeric(t)
for( i in 1:t){
X = (scaled[i]- mins)/(maxs - mins)
rawValues = X *(max - min) + min
inverted_dfs[i] <- rawValues
}
return(inverted_dfs)
}
library(swirl)
swirl()
install.packages("fields")
swirl()
dim(pm0)
head(pm0)
names(cnames)
print(cnames)
strsplit(cnames,"|",fixed = TRUE)
cnames<-strsplit(cnames,"|",fixed = TRUE)
print(cnames)
make.names(cnames[[1]][wcol])
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
m$n
x0<-pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1)<-make.names(cnames[[1]][wcol])
dim(pm1)
x1<-pm1$Sample.Value
is.na(x1)
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1))
x1<0
negative<- x1<0
sum(negative,na.rm = TRUE)
mean(negative,na.rm = TRUE)
dates<-pm1$Date
str(dates)
as.Date(as.character(dates),"%Y%m%d")
dates<-as.Date(as.character(dates),"%Y%m%d")
head(dates)
hist(dates[negative],month)
hist(dates[negative],"month")
str(site0)
both<-intersect(site0,site1)
both
head(pm0)
cnt0<-subset(pm0,)
cnt0<-subset(pm0,State.Code==36 &country.site %in% both)
cnt0<-subset(pm0,State.Code==36 &county.site %in% both)
cnt1<-subset(pm1,State.Code==36 &county.site %in% both)
sapply(split(cnt0,cnt0$county.site))
sapply(split(cnt0,cnt0$county.site),nrow)
sapply(split(cn1,cnt1$county.site),nrow)
sapply(split(cnt1,cnt1$county.site),nrow)
pm0sub<-subset(cnt0,County.Code = 63 & Site.ID =2008)
pm0sub<-subset(cnt0,County.Code==63 &Site.ID =2008)
pm0sub<-subset(cnt0)
pm0sub<-subset(cnt0,County.Code==63 &Site.ID ==2008)
pm1sub<-subset(cnt1,County.Code==63 &Site.ID ==2008)
x0sub<-pm0sub$Sample.Value
x1sub<-pm1sub$Sample.Value
dates0<-as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1<-as.Date(as.character(pm1sub$Date),"%Y%m%d")
mfrow=c(1,2)
par(mfrow=c(1,2),mar=c(4,4,2,1))
plot(dates0,x0sub,pch=20)
abline(median(x0sub,na.rm = TRUE),lwd=2)
abline(median(x0sub,na.rm = TRUE),lwd=2)
abline(median(x = x0sub,na.rm = TRUE),lwd=2)
abline(lwd=2)
abline(h=median(x = x0sub,na.rm = TRUE),lwd=2)
plot(dates1,x1sub,pch=20)
abline(h=median(x1sub,na.rm = TRUE),lwd=2)
rng<-range(x0sub,x1sub,na.rm = TRUE)
rng
mn0<-with(pm0,tapply(Sample.Vaue,State.Code,mean,na.rm=TRUE))
mn0<-with(pm0,tapply("Sample.Vaue","State.Code",mean,na.rm=TRUE))
mn0<-with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn0)
mn1<-with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0<-data.frame(state=names(mn0),mean(mn0))
d0<-data.frame(state=names(mn0),mean=mn0
)
d1<-data.frame(state=names(mn1),mean=mn1)
mrg<-merge(d0,d1,by="state")
dim(mrg)
head(mrg)
with(mrg,plot(rep(1,52),mrg[,2],range=c(.5,2.5))
)
with(mrg,plot(rep(1,52),mrg[,2],xlim=c(.5,2.5))
)
with(mrg,points(rep(2,52),mrg[,3]))
segments()
segments(x,y)
segments(rep(1,52),mrg[,2],rep(2,52),mrg[,3])
mrg[mrg$mean.x<mrg$mean.y,]
